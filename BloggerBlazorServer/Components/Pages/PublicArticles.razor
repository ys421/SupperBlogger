@page "/articles"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using BloggerBlazorServer.Data
@using BloggerBlazorServer.Models

@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

<h3>Article Manage Page</h3>

@if (isContributorOrAdmin)
{
    <EditForm Model="@dummyModel"
              OnValidSubmit="HandleCreateArticlePost"
              method="post"
              FormName="createArticleForm">
        <button type="submit" class="btn btn-primary mb-3">Create Article</button>
    </EditForm>
}

@if (articles == null)
{
    <p>Loading...</p>
}
else if (!articles.Any())
{
    <p>No articles found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Created By</th>
                <th>Last Modified By</th>
                <th>Created At</th>
                @if (isContributorOrAdmin)
                {
                    <th>Actions</th>
                }
            </tr>
        </thead>
        <tbody>
        @foreach (var article in articles)
        {
            <tr>
                <td>
                    <a href="/articles/@article.Id">@article.Title</a>
                </td>
                <td>@article.Creator?.UserName</td>
                <td>@article.LastModifier?.UserName</td>
                <td>@article.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</td>
                @if (isContributorOrAdmin)
                {
                    <td>
                        @if (isAdmin || (isContributor && article.CreatedBy == currentUserId))
                        {
                            <a href="@($"/articles/edit/{article.Id}")" class="btn btn-sm btn-secondary">Edit</a>
                        }
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private object dummyModel = new();
    private List<Article>? articles;
    private bool isContributorOrAdmin = false;
    private bool isAdmin = false;
    private bool isContributor = false;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true && user.Identity.Name is not null)
        {
            var appUser = await UserManager.FindByNameAsync(user.Identity.Name);
            if (appUser != null)
            {
                isAdmin = await UserManager.IsInRoleAsync(appUser, "Admin");
                isContributor = await UserManager.IsInRoleAsync(appUser, "Contributor");
                currentUserId = appUser.Id;
            }
        }
        isContributorOrAdmin = (isAdmin || isContributor);

        if (isAdmin)
        {
            articles = await DbContext.Articles
                .Include(a => a.Creator)
                .Include(a => a.LastModifier)
                .OrderByDescending(a => a.CreatedAt)
                .ToListAsync();
        }
        else if (isContributor)
        {
            var all = await DbContext.Articles
                .Include(a => a.Creator)
                .Include(a => a.LastModifier)
                .OrderByDescending(a => a.CreatedAt)
                .ToListAsync();

            articles = all.Where(a => a.CreatedBy == currentUserId || a.IsPublished).ToList();
        }
        else
        {
            articles = await DbContext.Articles
                .Include(a => a.Creator)
                .Include(a => a.LastModifier)
                .Where(a => a.IsPublished)
                .OrderByDescending(a => a.CreatedAt)
                .ToListAsync();
        }
    }

    private void HandleCreateArticlePost()
    {
        NavigationManager.NavigateTo("/articles/create");
    }
}