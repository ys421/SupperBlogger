@page "/manage-users"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using BloggerBlazorServer.Data
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Manage Users</h1>

@if (!isAdmin)
{
    <p>Access Denied. You are not an admin.</p>
}
else if (userInfos == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Roles</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var info in userInfos)
            {
                <tr>
                    <td>@info.User.Email</td>
                    <td>@string.Join(", ", info.Roles)</td>
                    <td>@(info.IsActive ? "Active" : "Inactive")</td>
                    <td>
                        @if (info.User.Email != "a@a.a")
                        {
                            <EditForm Model="info" 
                                    OnValidSubmit="@(() => ToggleActivePost(info))"
                                    method="post" 
                                    FormName="@($"toggleForm_{info.User.Id}")">
                                <input type="hidden" name="UserId" value="@info.User.Id" />
                                <button type="submit" 
                                        class="btn btn-sm @(info.IsActive ? "btn-outline-danger" : "btn-outline-success")">
                                    @(info.IsActive ? "Deactivate" : "Activate")
                                </button>
                            </EditForm>
                        }
                        else
                        {
                            <span class="text-muted">--</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isAdmin = false;
    private List<UserInfo>? userInfos;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true && user.Identity.Name is not null)
        {
            var currentUser = await UserManager.FindByNameAsync(user.Identity.Name);
            if (currentUser != null)
            {
                isAdmin = await UserManager.IsInRoleAsync(currentUser, "Admin");
            }
        }

        if (isAdmin)
        {
            await RefreshUserInfos();
        }
    }

    private async Task RefreshUserInfos()
    {
        var allUsers = await UserManager.Users.ToListAsync();
        userInfos = new List<UserInfo>();
        foreach (var u in allUsers)
        {
            var roles = await UserManager.GetRolesAsync(u);
            userInfos.Add(new UserInfo
            {
                User = u,
                Roles = roles.ToList(),
                IsActive = u.IsActive
            });
        }
        StateHasChanged();
    }

    private async Task ToggleActivePost(UserInfo info)
    {
        var user = await UserManager.FindByIdAsync(info.User.Id);
        if (user == null) return;

        user.IsActive = !user.IsActive;
        await UserManager.UpdateAsync(user);

        await RefreshUserInfos();
    }

    private class UserInfo
    {
        public ApplicationUser User { get; set; } = default!;
        public List<string> Roles { get; set; } = new();
        public bool IsActive { get; set; }
    }
}