@page "/manage-users"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using BloggerBlazorServer.Data
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Manage Users</h3>

@if (!isAdmin)
{
    <p>Access Denied. You are not an admin.</p>
}
else if (userInfos == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Roles</th>
                <th>Lockout</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var info in userInfos)
        {
            <tr>
                <td>@info.User.Email</td>
                <td>@string.Join(", ", info.Roles)</td>
                <td>@(info.IsLockedOut ? "Locked" : "Unlocked")</td>
                <td>
                    @if (info.User.Email != "a@a.a")
                    {
                        <button class="btn btn-sm btn-outline-primary"
                                @onclick="@(() => PromoteToContributor(info))">
                            Promote
                        </button>
                        <button class="btn btn-sm btn-outline-secondary"
                                @onclick="@(() => DemoteFromContributor(info))">
                            Demote
                        </button>
                        <button class="btn btn-sm @(info.IsLockedOut ? "btn-outline-success" : "btn-outline-danger")"
                                @onclick="@(() => ToggleLock(info))">
                            @(info.IsLockedOut ? "Unlock" : "Lock")
                        </button>
                    }
                    else
                    {
                        <span class="text-muted">--</span>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private bool isAdmin = false;
    private List<UserInfo>? userInfos;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var currentUser = await UserManager.FindByNameAsync(user.Identity.Name);
            isAdmin = await UserManager.IsInRoleAsync(currentUser, "Admin");
        }

        if (isAdmin)
        {
            await RefreshUserInfos();
        }
    }

    private async Task PromoteToContributor(UserInfo info)
    {
        Console.WriteLine("PromoteToContributor called for " + info.User.Email);
        if (!info.Roles.Contains("Contributor"))
        {
            var result = await UserManager.AddToRoleAsync(info.User, "Contributor");
            if (!result.Succeeded)
            {
                Console.WriteLine("Promote failed: " + string.Join(", ", result.Errors.Select(e => e.Description)));
                return;
            }
        }
        await RefreshUserInfos();
    }

    private async Task DemoteFromContributor(UserInfo info)
    {
        Console.WriteLine("DemoteFromContributor called for " + info.User.Email);
        if (info.Roles.Contains("Contributor"))
        {
            var result = await UserManager.RemoveFromRoleAsync(info.User, "Contributor");
            if (!result.Succeeded)
            {
                Console.WriteLine("Demote failed: " + string.Join(", ", result.Errors.Select(e => e.Description)));
                return;
            }
        }
        await RefreshUserInfos();
    }

    private async Task ToggleLock(UserInfo info)
    {
        Console.WriteLine("ToggleLock called for " + info.User.Email);
        var result = info.IsLockedOut
            ? await UserManager.SetLockoutEndDateAsync(info.User, null)
            : await UserManager.SetLockoutEndDateAsync(info.User, DateTimeOffset.MaxValue);
        if (!result.Succeeded)
        {
            Console.WriteLine("ToggleLock failed: " + string.Join(", ", result.Errors.Select(e => e.Description)));
            return;
        }
        await RefreshUserInfos();
    }

    private async Task RefreshUserInfos()
{
    var allUsers = await UserManager.Users.ToListAsync();
    userInfos = new List<UserInfo>();
    foreach (var u in allUsers)
    {
        var roles = await UserManager.GetRolesAsync(u);
        bool locked = await UserManager.IsLockedOutAsync(u);
        userInfos.Add(new UserInfo
        {
            User = u,
            Roles = roles.ToList(),
            IsLockedOut = locked
        });
    }
    StateHasChanged(); // UI 갱신 강제
}

    private class UserInfo
    {
        public ApplicationUser User { get; set; } = default!;
        public List<string> Roles { get; set; } = new();
        public bool IsLockedOut { get; set; }
    }
}