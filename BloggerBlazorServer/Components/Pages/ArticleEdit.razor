@page "/articles/edit/{id:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using BloggerBlazorServer.Data
@using BloggerBlazorServer.Models

@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<ArticleEdit> Logger

<h3>Edit Article</h3>

@if (article == null)
{
    <p>Loading...</p>
}
else if (!canEdit)
{
    <p>You do not have permission to edit this article.</p>
}
else
{
    <form method="post" action="/Article/Edit">
        <input type="hidden" name="Id" value="@article.Id" />
        <input type="hidden" name="CreatedBy" value="@article.CreatedBy" />
        <input type="hidden" name="LastModifiedBy" value="@currentUserId" />

        <div class="mb-3">
            <label class="form-label">Title</label>
            <input type="text" name="Title" class="form-control"
                   value="@article.Title" required minlength="5" maxlength="200" />
        </div>

        <div class="mb-3">
            <label class="form-label">Body</label>
            <textarea name="Body" class="form-control" rows="5"
                      required minlength="20">@article.Body</textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">Start Date</label>
            <input type="date" name="StartDate" class="form-control"
                   value="@article.StartDate.ToString("yyyy-MM-dd")" required />
        </div>

        <div class="mb-3">
            <label class="form-label">End Date</label>
            <input type="date" name="EndDate" class="form-control"
                   value="@article.EndDate.ToString("yyyy-MM-dd")" required />
        </div>

        <div class="form-check mb-3">
            <input type="checkbox" name="IsPublished" class="form-check-input" value="true" @(article.IsPublished ? "checked" : "") />
            <input type="hidden" name="IsPublished" value="false" />
            <label class="form-check-label">Publish Article</label>
        </div>

        <p>Created at: @article.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</p>

        <button type="submit" class="btn btn-primary">Save Changes</button>
        <button type="button" class="btn btn-secondary" onclick="window.location.href='/articles'">Cancel</button>
    </form>
}

@code {
    [Parameter] public int id { get; set; }
    private Article? article;
    private bool canEdit = false;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("ArticleEdit OnInitializedAsync 시작됨");

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        ApplicationUser? appUser = null;
        if (user.Identity?.IsAuthenticated == true)
        {
            appUser = await UserManager.FindByNameAsync(user.Identity.Name);
            if (appUser != null)
            {
                currentUserId = appUser.Id;
                Logger.LogInformation("currentUserId = {UserId}", currentUserId);
            }
        }

        article = await DbContext.Articles.FirstOrDefaultAsync(a => a.Id == id);
        if (article == null)
        {
            Logger.LogWarning("Article with Id {Id} not found", id);
            return;
        }

        bool isAdmin = false;
        bool isContributor = false;
        if (appUser != null)
        {
            isAdmin = await UserManager.IsInRoleAsync(appUser, "Admin");
            isContributor = await UserManager.IsInRoleAsync(appUser, "Contributor");
        }

        if (isAdmin)
        {
            canEdit = true;
        }
        else if (isContributor && article.CreatedBy == currentUserId)
        {
            canEdit = true;
        }
        else
        {
            canEdit = false;
        }

        Logger.LogInformation("canEdit: {CanEdit}", canEdit);
    }
}