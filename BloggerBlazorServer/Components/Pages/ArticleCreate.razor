@page "/articles/create"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using BloggerBlazorServer.Data
@using BloggerBlazorServer.Models

@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject ILogger<ArticleCreate> Logger
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Create Article</PageTitle>

<h1>Create Article</h1>

<EditForm Model="Input" 
          asp-route-returnUrl="@ReturnUrl"
          method="post"
          OnValidSubmit="HandleValidSubmit"
          FormName="createArticle">
    <DataAnnotationsValidator />
    <h2>Create a new article.</h2>
    <hr />
    <ValidationSummary class="text-danger" role="alert" />

    <div class="mb-3">
        <label for="Input.Title" class="form-label">Title</label>
        <InputText @bind-Value="Input.Title" id="Input.Title" class="form-control" />
        <ValidationMessage For="() => Input.Title" />
    </div>

    <div class="mb-3">
        <label for="Input.Body" class="form-label">Body</label>
        <InputTextArea @bind-Value="Input.Body" id="Input.Body" class="form-control" Rows="5" />
        <ValidationMessage For="() => Input.Body" />
    </div>

    <div class="mb-3">
        <label for="Input.StartDate" class="form-label">Start Date</label>
        <InputDate @bind-Value="Input.StartDate" id="Input.StartDate" class="form-control" />
        <ValidationMessage For="() => Input.StartDate" />
    </div>

    <div class="mb-3">
        <label for="Input.EndDate" class="form-label">End Date</label>
        <InputDate @bind-Value="Input.EndDate" id="Input.EndDate" class="form-control" />
        <ValidationMessage For="() => Input.EndDate" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="Input.IsPublished" />
        <label class="form-check-label">Publish Article</label>
    </div>

    <p>Created at (UTC): @Input.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</p>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private sealed class InputModel
    {
        [Required]
        [StringLength(200, MinimumLength = 5, ErrorMessage = "Title must be at least 5 characters.")]
        public string Title { get; set; } = "";

        [Required]
        [MinLength(20, ErrorMessage = "Body must be at least 20 characters.")]
        public string Body { get; set; } = "";

        [Required]
        public DateTime StartDate { get; set; } = DateTime.UtcNow;

        [Required]
        public DateTime EndDate { get; set; } = DateTime.UtcNow.AddDays(30);

        public bool IsPublished { get; set; } = false;

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public string? CreatedBy { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true && user.Identity.Name is not null)
        {
            var appUser = await UserManager.FindByNameAsync(user.Identity.Name);
            if (appUser != null)
            {
                Input.CreatedBy = appUser.Id;
            }
        }
    }

    public async Task HandleValidSubmit()
    {
        Input.CreatedAt = DateTime.UtcNow;

        var article = new Article
        {
            Title = Input.Title,
            Body = Input.Body,
            StartDate = Input.StartDate,
            EndDate = Input.EndDate,
            IsPublished = Input.IsPublished,
            CreatedAt = Input.CreatedAt,
            CreatedBy = Input.CreatedBy,
            LastModifiedBy = Input.CreatedBy
        };

        DbContext.Articles.Add(article);
        await DbContext.SaveChangesAsync();

        Logger.LogInformation("Article created with Title: {Title}, CreatedAt: {CreatedAt}", article.Title, article.CreatedAt);
        NavigationManager.NavigateTo("/articles");
    }
}