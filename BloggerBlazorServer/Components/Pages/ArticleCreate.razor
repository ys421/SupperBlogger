@page "/articles/create"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using BloggerBlazorServer.Data
@using BloggerBlazorServer.Models

@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject ILogger<ArticleCreate> Logger
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Create Article</PageTitle>

<h1>Create Article</h1>

<EditForm Model="Input" 
          asp-route-returnUrl="@ReturnUrl"
          method="post"
          OnValidSubmit="HandleValidSubmit"
          FormName="createArticle">
    <DataAnnotationsValidator />
    <h2>Create a new article.</h2>
    <hr />
    <ValidationSummary class="text-danger" role="alert" />

    <div class="mb-3">
        <label for="Input.Title" class="form-label">Title</label>
        <InputText @bind-Value="Input.Title" id="Input.Title" class="form-control" />
        <ValidationMessage For="() => Input.Title" />
    </div>

    <div class="mb-3">
        <label for="Input.Body" class="form-label">Body</label>
        <InputTextArea @bind-Value="Input.Body" id="Input.Body" class="form-control" Rows="5" />
        <ValidationMessage For="() => Input.Body" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="Input.IsPublished" />
        <label class="form-check-label">Publish Article</label>
    </div>

    <p>Created at (UTC): @Input.CreatedAt</p>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    // 폼 데이터 바인딩을 위한 모델 (CreatedBy 대신 AuthorId를 대체)
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    // (선택) ReturnUrl 쿼리 파라미터
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    // InputModel 내부에서 AuthorId를 CreatedBy로 변경
    private sealed class InputModel
    {
        [Required]
        [StringLength(200, MinimumLength = 5, ErrorMessage = "Title must be at least 5 characters.")]
        public string Title { get; set; } = "";

        [Required]
        [MinLength(20, ErrorMessage = "Body must be at least 20 characters.")]
        public string Body { get; set; } = "";

        public bool IsPublished { get; set; } = false;

        // 작성 시각
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        // 원 작성자 – CreatedBy
        public string? CreatedBy { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // 로그인 사용자 가져오기
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.FindByNameAsync(user.Identity.Name);
            if (appUser != null)
            {
                Input.CreatedBy = appUser.Id;
            }
        }
    }

    // 폼 제출 시 실행되는 로직
public async Task HandleValidSubmit()
{
    var article = new Article
    {
        Title       = Input.Title,
        Body        = Input.Body,
        IsPublished = Input.IsPublished,
        CreatedAt   = Input.CreatedAt,
        CreatedBy   = Input.CreatedBy,
        LastModifiedBy = Input.CreatedBy   // 처음 생성 시 작성자와 동일하게 설정
    };

    DbContext.Articles.Add(article);
    await DbContext.SaveChangesAsync();

    Logger.LogInformation("Article created with Title: {Title}", article.Title);
    NavigationManager.NavigateTo("/articles");
}

}
